    Finished dev [unoptimized + debuginfo] target(s) in 0.00s
     Running `target/debug/terms`
[src/main.rs:30] block = Block {
    terms: [
        Func {
            name: Object {
                kind: Identity(
                    Token(
                        Identity(
                            "fizzbuzz",
                        ),
                    ),
                ),
                sub: None,
            },
            returntype: Type {
                object: Object {
                    kind: Identity(
                        Token(
                            Identity(
                                "null",
                            ),
                        ),
                    ),
                    sub: None,
                },
                array: Not,
                associated_types: [],
            },
            typeargs: [],
            args: [
                VarSigniture {
                    identity: Object {
                        kind: Identity(
                            Token(
                                Identity(
                                    "n",
                                ),
                            ),
                        ),
                        sub: None,
                    },
                    argtype: Type {
                        object: Object {
                            kind: Identity(
                                Token(
                                    Identity(
                                        "int",
                                    ),
                                ),
                            ),
                            sub: None,
                        },
                        array: Not,
                        associated_types: [],
                    },
                },
            ],
            block: Block {
                terms: [
                    Loop {
                        counter: Object {
                            kind: Identity(
                                Token(
                                    Identity(
                                        "i",
                                    ),
                                ),
                            ),
                            sub: None,
                        },
                        conditional: Binary {
                            operand: Token(
                                Operator(
                                    Less,
                                ),
                            ),
                            left: Object(
                                Object {
                                    kind: Identity(
                                        Token(
                                            Identity(
                                                "i",
                                            ),
                                        ),
                                    ),
                                    sub: None,
                                },
                            ),
                            right: Object(
                                Object {
                                    kind: Identity(
                                        Token(
                                            Identity(
                                                "n",
                                            ),
                                        ),
                                    ),
                                    sub: None,
                                },
                            ),
                        },
                        block: Block {
                            terms: [
                                DeclareVar {
                                    name: Object {
                                        kind: Identity(
                                            Token(
                                                Identity(
                                                    "result",
                                                ),
                                            ),
                                        ),
                                        sub: None,
                                    },
                                    vartype: Type {
                                        object: Object {
                                            kind: Identity(
                                                Token(
                                                    Identity(
                                                        "str",
                                                    ),
                                                ),
                                            ),
                                            sub: None,
                                        },
                                        array: Not,
                                        associated_types: [],
                                    },
                                    value: Literal(
                                        Token(
                                            String(
                                                "\"",
                                            ),
                                        ),
                                    ),
                                },
                                If {
                                    conditional: Binary {
                                        operand: Token(
                                            Operator(
                                                Equal,
                                            ),
                                        ),
                                        left: Binary {
                                            operand: Token(
                                                Operator(
                                                    Modulo,
                                                ),
                                            ),
                                            left: Object(
                                                Object {
                                                    kind: Identity(
                                                        Token(
                                                            Identity(
                                                                "i",
                                                            ),
                                                        ),
                                                    ),
                                                    sub: None,
                                                },
                                            ),
                                            right: Literal(
                                                Token(
                                                    Int(
                                                        3,
                                                    ),
                                                ),
                                            ),
                                        },
                                        right: Literal(
                                            Token(
                                                Int(
                                                    0,
                                                ),
                                            ),
                                        ),
                                    },
                                    block: Block {
                                        terms: [
                                            UpdateVar {
                                                var: Object {
                                                    kind: Identity(
                                                        Token(
                                                            Identity(
                                                                "result",
                                                            ),
                                                        ),
                                                    ),
                                                    sub: None,
                                                },
                                                set_operator: SetAdd,
                                                value: Literal(
                                                    Token(
                                                        String(
                                                            "\"Fizz",
                                                        ),
                                                    ),
                                                ),
                                            },
                                        ],
                                    },
                                    else_block: Block {
                                        terms: [],
                                    },
                                },
                                If {
                                    conditional: Binary {
                                        operand: Token(
                                            Operator(
                                                Equal,
                                            ),
                                        ),
                                        left: Binary {
                                            operand: Token(
                                                Operator(
                                                    Modulo,
                                                ),
                                            ),
                                            left: Object(
                                                Object {
                                                    kind: Identity(
                                                        Token(
                                                            Identity(
                                                                "i",
                                                            ),
                                                        ),
                                                    ),
                                                    sub: None,
                                                },
                                            ),
                                            right: Literal(
                                                Token(
                                                    Int(
                                                        5,
                                                    ),
                                                ),
                                            ),
                                        },
                                        right: Literal(
                                            Token(
                                                Int(
                                                    0,
                                                ),
                                            ),
                                        ),
                                    },
                                    block: Block {
                                        terms: [
                                            UpdateVar {
                                                var: Object {
                                                    kind: Identity(
                                                        Token(
                                                            Identity(
                                                                "result",
                                                            ),
                                                        ),
                                                    ),
                                                    sub: None,
                                                },
                                                set_operator: SetAdd,
                                                value: Literal(
                                                    Token(
                                                        String(
                                                            "\"Buzz",
                                                        ),
                                                    ),
                                                ),
                                            },
                                        ],
                                    },
                                    else_block: Block {
                                        terms: [],
                                    },
                                },
                                If {
                                    conditional: Binary {
                                        operand: Token(
                                            Operator(
                                                Equal,
                                            ),
                                        ),
                                        left: Object(
                                            Object {
                                                kind: Identity(
                                                    Token(
                                                        Identity(
                                                            "result",
                                                        ),
                                                    ),
                                                ),
                                                sub: None,
                                            },
                                        ),
                                        right: Literal(
                                            Token(
                                                String(
                                                    "\"",
                                                ),
                                            ),
                                        ),
                                    },
                                    block: Block {
                                        terms: [
                                            UpdateVar {
                                                var: Object {
                                                    kind: Identity(
                                                        Token(
                                                            Identity(
                                                                "result",
                                                            ),
                                                        ),
                                                    ),
                                                    sub: None,
                                                },
                                                set_operator: Set,
                                                value: Object(
                                                    Object {
                                                        kind: Identity(
                                                            Token(
                                                                Identity(
                                                                    "i",
                                                                ),
                                                            ),
                                                        ),
                                                        sub: Some(
                                                            Object {
                                                                kind: Identity(
                                                                    Token(
                                                                        Identity(
                                                                            "@str",
                                                                        ),
                                                                    ),
                                                                ),
                                                                sub: Some(
                                                                    Object {
                                                                        kind: Call(
                                                                            Call {
                                                                                typeargs: [],
                                                                                args: [],
                                                                            },
                                                                        ),
                                                                        sub: None,
                                                                    },
                                                                ),
                                                            },
                                                        ),
                                                    },
                                                ),
                                            },
                                        ],
                                    },
                                    else_block: Block {
                                        terms: [],
                                    },
                                },
                                Print {
                                    ln: true,
                                    operand_block: Object(
                                        Object {
                                            kind: Identity(
                                                Token(
                                                    Identity(
                                                        "result",
                                                    ),
                                                ),
                                            ),
                                            sub: None,
                                        },
                                    ),
                                },
                            ],
                        },
                    },
                ],
            },
        },
        Func {
            name: Object {
                kind: Identity(
                    Token(
                        Identity(
                            "main",
                        ),
                    ),
                ),
                sub: None,
            },
            returntype: Type {
                object: Object {
                    kind: Identity(
                        Token(
                            Identity(
                                "int",
                            ),
                        ),
                    ),
                    sub: None,
                },
                array: Not,
                associated_types: [],
            },
            typeargs: [],
            args: [
                VarSigniture {
                    identity: Object {
                        kind: Identity(
                            Token(
                                Identity(
                                    "args",
                                ),
                            ),
                        ),
                        sub: None,
                    },
                    argtype: Type {
                        object: Object {
                            kind: Identity(
                                Token(
                                    Identity(
                                        "string",
                                    ),
                                ),
                            ),
                            sub: None,
                        },
                        array: Normal,
                        associated_types: [],
                    },
                },
                VarSigniture {
                    identity: Object {
                        kind: Identity(
                            Token(
                                Identity(
                                    "debug",
                                ),
                            ),
                        ),
                        sub: None,
                    },
                    argtype: Type {
                        object: Object {
                            kind: Identity(
                                Token(
                                    Identity(
                                        "bool",
                                    ),
                                ),
                            ),
                            sub: None,
                        },
                        array: Not,
                        associated_types: [],
                    },
                },
            ],
            block: Block {
                terms: [
                    DeclareVar {
                        name: Object {
                            kind: Identity(
                                Token(
                                    Identity(
                                        "input",
                                    ),
                                ),
                            ),
                            sub: None,
                        },
                        vartype: Type {
                            object: Object {
                                kind: Identity(
                                    Token(
                                        Identity(
                                            "str",
                                        ),
                                    ),
                                ),
                                sub: None,
                            },
                            array: Not,
                            associated_types: [],
                        },
                        value: Literal(
                            Token(
                                String(
                                    "\"",
                                ),
                            ),
                        ),
                    },
                    ReadLn {
                        var: Object {
                            kind: Identity(
                                Token(
                                    Identity(
                                        "input",
                                    ),
                                ),
                            ),
                            sub: None,
                        },
                    },
                    If {
                        conditional: Object(
                            Object {
                                kind: Identity(
                                    Token(
                                        Identity(
                                            "debug",
                                        ),
                                    ),
                                ),
                                sub: None,
                            },
                        ),
                        block: Block {
                            terms: [
                                DeclareVar {
                                    name: Object {
                                        kind: Identity(
                                            Token(
                                                Identity(
                                                    "time",
                                                ),
                                            ),
                                        ),
                                        sub: None,
                                    },
                                    vartype: Type {
                                        object: Object {
                                            kind: Identity(
                                                Token(
                                                    Identity(
                                                        "float",
                                                    ),
                                                ),
                                            ),
                                            sub: None,
                                        },
                                        array: Not,
                                        associated_types: [],
                                    },
                                    value: Object(
                                        Object {
                                            kind: Identity(
                                                Token(
                                                    Identity(
                                                        "time",
                                                    ),
                                                ),
                                            ),
                                            sub: Some(
                                                Object {
                                                    kind: Identity(
                                                        Token(
                                                            Identity(
                                                                "now",
                                                            ),
                                                        ),
                                                    ),
                                                    sub: Some(
                                                        Object {
                                                            kind: Call(
                                                                Call {
                                                                    typeargs: [],
                                                                    args: [],
                                                                },
                                                            ),
                                                            sub: None,
                                                        },
                                                    ),
                                                },
                                            ),
                                        },
                                    ),
                                },
                                Return {
                                    value: Object(
                                        Object {
                                            kind: Identity(
                                                Token(
                                                    Identity(
                                                        "fizzbuzz",
                                                    ),
                                                ),
                                            ),
                                            sub: Some(
                                                Object {
                                                    kind: Call(
                                                        Call {
                                                            typeargs: [],
                                                            args: [
                                                                Object(
                                                                    Object {
                                                                        kind: Identity(
                                                                            Token(
                                                                                Identity(
                                                                                    "args",
                                                                                ),
                                                                            ),
                                                                        ),
                                                                        sub: Some(
                                                                            Object {
                                                                                kind: Index(
                                                                                    Index(
                                                                                        [
                                                                                            Literal(
                                                                                                Token(
                                                                                                    Int(
                                                                                                        0,
                                                                                                    ),
                                                                                                ),
                                                                                            ),
                                                                                        ],
                                                                                    ),
                                                                                ),
                                                                                sub: None,
                                                                            },
                                                                        ),
                                                                    },
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                    sub: None,
                                                },
                                            ),
                                        },
                                    ),
                                },
                                UpdateVar {
                                    var: Object {
                                        kind: Identity(
                                            Token(
                                                Identity(
                                                    "time",
                                                ),
                                            ),
                                        ),
                                        sub: None,
                                    },
                                    set_operator: Set,
                                    value: Binary {
                                        operand: Token(
                                            Operator(
                                                Subtract,
                                            ),
                                        ),
                                        left: Object(
                                            Object {
                                                kind: Identity(
                                                    Token(
                                                        Identity(
                                                            "time",
                                                        ),
                                                    ),
                                                ),
                                                sub: Some(
                                                    Object {
                                                        kind: Identity(
                                                            Token(
                                                                Identity(
                                                                    "now",
                                                                ),
                                                            ),
                                                        ),
                                                        sub: Some(
                                                            Object {
                                                                kind: Call(
                                                                    Call {
                                                                        typeargs: [],
                                                                        args: [],
                                                                    },
                                                                ),
                                                                sub: None,
                                                            },
                                                        ),
                                                    },
                                                ),
                                            },
                                        ),
                                        right: Object(
                                            Object {
                                                kind: Identity(
                                                    Token(
                                                        Identity(
                                                            "time",
                                                        ),
                                                    ),
                                                ),
                                                sub: None,
                                            },
                                        ),
                                    },
                                },
                                Print {
                                    ln: true,
                                    operand_block: Binary {
                                        operand: Token(
                                            Operator(
                                                Add,
                                            ),
                                        ),
                                        left: Literal(
                                            Token(
                                                String(
                                                    "Time: ",
                                                ),
                                            ),
                                        ),
                                        right: Binary {
                                            operand: Token(
                                                Operator(
                                                    Add,
                                                ),
                                            ),
                                            left: Object(
                                                Object {
                                                    kind: Identity(
                                                        Token(
                                                            Identity(
                                                                "time",
                                                            ),
                                                        ),
                                                    ),
                                                    sub: None,
                                                },
                                            ),
                                            right: Literal(
                                                Token(
                                                    String(
                                                        "",
                                                    ),
                                                ),
                                            ),
                                        },
                                    },
                                },
                            ],
                        },
                        else_block: Block {
                            terms: [
                                Return {
                                    value: Object(
                                        Object {
                                            kind: Identity(
                                                Token(
                                                    Identity(
                                                        "fizzbuzz",
                                                    ),
                                                ),
                                            ),
                                            sub: Some(
                                                Object {
                                                    kind: Call(
                                                        Call {
                                                            typeargs: [],
                                                            args: [
                                                                Object(
                                                                    Object {
                                                                        kind: Identity(
                                                                            Token(
                                                                                Identity(
                                                                                    "args",
                                                                                ),
                                                                            ),
                                                                        ),
                                                                        sub: Some(
                                                                            Object {
                                                                                kind: Index(
                                                                                    Index(
                                                                                        [
                                                                                            Literal(
                                                                                                Token(
                                                                                                    Int(
                                                                                                        0,
                                                                                                    ),
                                                                                                ),
                                                                                            ),
                                                                                        ],
                                                                                    ),
                                                                                ),
                                                                                sub: None,
                                                                            },
                                                                        ),
                                                                    },
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                    sub: None,
                                                },
                                            ),
                                        },
                                    ),
                                },
                            ],
                        },
                    },
                ],
            },
        },
    ],
}

`my program`

# Custom Struct
struct MyCustomStruct {
    let int val ~
    let int val2 ~

    func str @str: {
        return "MyCustomStruct(%)" % ("val: % " % @this.val.@str.() + "val2: %" % @this.val2.@str.()) ~
    }

    func null @new: int _1, int _2 {
        updt @this.val = _1 ~
        updt @this.val2 = _2 ~
    }
}

# Declare a Function
func null do_a_thing: MyCustomStruct _struct {
    # Get user name
    println 'What is your name? ' ~
    let str name = "Owen" ~
    println "Hello, %!" % name ~

    # Create loop
    loop i: i < _struct.val {
        println "Number: " + i.@str.() ~

        if i < 50 {
            continue ~
        } else {
            break ~
        }
    }

    loop x: x < _struct.val2 {
        let str type = null ~
        if x % 2 == 0 {
            updt type = "even" ~
        } else {
            updt type = "odd" ~
        }

        println x.@str.() + " is an " + type + " number." ~
    }

    updt name = "My New Value" ~
    println name ~
}

# main function
func null amain: str[] args {
    # Create MyCustomStruct Instance
    let MyCustomStruct my_instance = $(100, 200) MyCustomStruct ~

    # Call a Function
    cll do_a_thing.(my_instance) ~
}

func int fib: int n {
    if n <= 1 {
        return n ~
    } else {
        return fib.(n - 1) + fib.(n - 2) ~
    }
}

func int @main: str[] args {
    # # println fib.(20).@str.()~
    # println amain.(args).@str.()~

    # let int[] a = $() int[]~
    # cll a.@append.("goat", "PIG", 34)~
    # cll a.@append.("23", "PIG", 34)~

    # println a.@len.().@str.()~
    # println a.[3].@str.()~
    # println args.[1]~

    # let MyCustomStruct a = $(1, 2) MyCustomStruct~
    # println a.@str.()~

    # updt a.val2 = 1~
    # updt a.val = "pig"~

    println "How old are you?" ~
    let str age = readln.() ~

    println "This old goat is % years old!" % (age.@int.() -100).@str.() ~
}
